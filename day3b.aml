(***************************************************
   Advent of Code 2024 - Day3, Part 2 : Alice ML 
   compile: alicec day3b.aml
   run:     alicerun day3b day3.txt
****************************************************)

(* Utility infix operator to chain functions that take one input and
   return an optional result, bypassing fun application for NONE: 
   'a option -> ('a -> 'b option) -> 'b option *)
infix 1 >>=
fun a >>= f = 
  case a of
  | SOME a' => f a'
  | NONE => NONE

(* Utility predicate to match / not match a single char *)
fun isc  (c : char) = fn d => d =  c
fun notc (c : char) = fn d => d <> c

fun getx (ss,n) = (* (ss,n) -> (ss,n) option *)
  let val (xs,yss) = Substring.splitl (notc #",") ss
  in if (Substring.size xs) <= 3
     then case (Int.fromString (Substring.string xs)) of
          | SOME x => SOME ((Substring.triml 1 yss),x)
          | NONE => NONE
     else NONE
  end

fun gety (ss,x) = 
  let val (ys,zss) = Substring.splitl (notc #")") ss
  in if (Substring.size ys) <= 3
     then case (Int.fromString (Substring.string ys)) of
          | SOME y => SOME ((Substring.triml 1 zss), x*y)
          | NONE => NONE
     else NONE
  end

fun calcmul (ss,n) = (* (ss,n) -> (ss,n) *)
  case ( SOME (ss,n) >>= getx >>= gety ) of
  | SOME (rst,xy) => (rst,xy)
  | NONE => (ss,0)

fun findmuls (ss,n,dob) = (* (ss,n,dob) -> n *)
  if dob then
    let val (drp,muls) = Substring.position "mul(" ss
        val (_,im,_) = Substring.base muls
        val (dis,dnts) = Substring.position "don't()" ss
        val (_,id,_) = Substring.base dnts
    in if (id < im) then findmuls ((Substring.triml 4 muls),n,false)
       else if Substring.isEmpty muls then n
       else
         let val (rst,xy) = calcmul ((Substring.triml 4 muls),n)
         in findmuls (rst,n+xy,dob)
         end
    end
  else (* In 'don't()' mode, look for next 'do()' *)
    let val (drp,dos) = Substring.position "do()" ss
    in if Substring.isEmpty dos then n
       else findmuls ((Substring.triml 4 dos),n,true)
    end


structure Day3b = 
struct
  fun day3b () = 
    let 
      val fname = hd (CommandLine.arguments())
      val file = TextIO.openIn fname
      val str = TextIO.inputAll file before TextIO.closeIn file
      val res = findmuls ((Substring.full str),0,true)
    in
      print( Int.toString(res) ^ "\n" )
    end

  val _ = day3b()
  val _ = OS.Process.exit OS.Process.success
end

